import {useState, useCallback} from "react";

const Test = () => {
    const [list, setList] = useState([]);
    const [search, setSearch] = useState({
        a: "",
        b: "",
    });

    const add = (a, b) => {
        let result = parseInt(a) + parseInt(b);
        return isNaN(result) ? "" : result;
    };

    const handleChange = useCallback((e) => {
        const updatedSearch = {...search, [e.target.name]: e.target.value};
        setSearch(updatedSearch);
        const result = add(updatedSearch.a, updatedSearch.b);

        if(result !== "") {
            setList(prevList => {
                // If the list already has 8 items, reset the list
                if (prevList.length === 8) {
                    return [{
                        a: updatedSearch.a,
                        b: updatedSearch.b,
                        result: result
                    }];
                }

                // Otherwise, add new item to the list
                return [...prevList, {
                    a: updatedSearch.a,
                    b: updatedSearch.b,
                    result: result
                }];
            });
        }
    }, [search]);

    return (
        <div>


            <input value={search.a} name={'a'} onChange={handleChange}/>
            <input value={search.b} name={'b'} onChange={handleChange}/>
            <div style={{border: "solid 1px black"}}> a : {search.a}</div>
            <div style={{border: "solid 1px red"}}> b : {search.b}</div>
            <div>
                <div>결과 값 {add(search.a, search.b)}</div>
                <div>
                    {list.map((item, index) => (
                        <div key={index}>
                            <div>a: {item.a}, b: {item.b}, 결과값: {item.result}</div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default Test;


  const GoalSeekAI = (r6, u7, ai7, x6) => {
        if (r6 === "" || u7 === "") {
            return "";
        } else {
            return u7 * Math.pow((ai7 / 1000), 5) * Math.pow((Math.PI / (4 * r6 / 3600)), 2) * 2 / 1.2 - 0.0055 *
                Math.pow(1 + ((20000 * x6 / ai7 + 1.5 * Math.PI * ai7 / 1000 * 10 / (4 * r6 / 3600))), (1/3));
        }
    };

    const GoalSeekAG = (r6, u7, ai7) => {
        if (r6 === "" || u7 === "") {
            return "";
        } else {
            return u7 * Math.pow((ai7 / 1000), 5) * Math.pow((Math.PI / (4 * r6 / 3600)), 2) * 2 / 1.2 - 64 * Math.PI * ai7 / 1000 / (4 * r6 / 3600) * 1.5 * Math.pow(10, -5);
        }
    };


// GoalSeekAJ 함수는 주어진 매개 변수 값을 이용해 계산 결과를 디스플레이합니다.
    const GoalSeekAJ = (r6, u7, ak7, al7, ai7) => {
        if (r6 === "" || u7 === "") {
            return "";
        } else {
            return 1.3 * Math.pow((ak7 * al7), 5) / Math.pow((ak7 + al7), 2) ** (1/8) / ai7;
        }
    };


// GoalSeekAM 함수는 너비와 높이를 비교한 후 나머지 변수를 이용해 계산 결과를 화면에 출력합니다.
    const GoalSeekAM = (r6, u7, an7, ao7, ai7) => {
        if (r6 === "" || u7 === "") {
            return "";
        } else if (an7 > ao7) {
            return 1.55 * Math.pow((Math.PI / 4 * Math.pow(ao7, 2) + ao7 * (an7 - ao7)), 0.625) / Math.pow((Math.PI * ao7 + 2 * (an7 - ao7)), 0.25) / ai7;
        } else {
            return 1.55 * Math.pow((Math.PI / 4 * Math.pow(an7, 2) + an7 * (ao7 - an7)), 0.625) / Math.pow((Math.PI * an7 + 2 * (ao7 - an7)), 0.25) / ai7;
        }
    }